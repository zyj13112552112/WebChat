

version: "3.0"

services:
  mysql:
    image: mysql
    #使用该参数，container内的root拥有真正的root权限，否则，container内的root只是外部的一个普通用户权限
    #设置为true，不然数据卷可能挂载不了，启动不起
    privileged: true
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      #映射mysql的数据目录到宿主机，保存数据
      - "/root/mysql/data:/var/lib/mysql"
      #根据宿主机下的配置文件创建容器
      - "/root/mysql/config/my.cnf:/etc/mysql/my.cnf"


    #  rabbitmq服务
    #  docker-compose up -d 启动
    #  进入容器内 docker-compose exec rabbitmq01 bash
    #  启动web页面访问 rabbitmq-plugins enable rabbitmq_management
  rabbitmq:
      image: rabbitmq
      restart: always
      ports:
        - "15672:15672"
        - "5672:5672"
      environment:
        RABBITMQ_DEFAULT_USER: root
        RABBITMQ_DEFAULT_PASS: root
      volumes:
        - /root/rabbitmq/data/:/var/lib/rabbitmq/

  redis:
    image: redis
    restart: always
    container_name: redis
    hostname: redis
    privileged: true
    ports:
      - 6379:6379
    environment:
      TZ: Asia/Shanghai
    volumes:
      - /root/redis/data:/data
      - /root/redis/conf/redis.conf:/etc/redis/redis.conf
      - /root/redis/logs:/logs
    command: [ "redis-server","/etc/redis/redis.conf" ] #提前创建好redis的配置文件

  mongo:
    image: mongo
    restart: always
    container_name: mongo
    privileged: true
    ports:
      - "27017:27017"
    volumes:
        - "/root/mongo/data:/data/db"
        - "/root/mongo/logs:/var/log/mongodb"
  #docker exec -it mongodb /bin/bash
  #mongosh
  ##使用chat库，如果不存在会创建
  #use chat
  ##创建用户并赋予角色权限
  #db.createUser({user:'root',pwd:'root',roles:[{role:'userAdmin',db:'chat'},"readWrite"]});
